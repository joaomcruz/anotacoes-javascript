• Variáveis criadas dentro de bloco try catch e finally são locais.

		***********************************
		*				  *
		*	Bloco Try/Catch 	  *
		*				  *
		*				  *
		***********************************


• Para lidarmos com possíveis erros que possam ocorrer no nosso código, existe o bloco try/catch

• Esse bloco tenta executar uma certa ação,e caso não consiga, lida com esse "erro" executando um bloco
  de código definido por nós. Isso serve para que a aplicação não quebre.

• É possível "pegarmos" qual o erro deu na aplicação no bloco catch.

• Funciona de maneira síncrona

• Só funciona para erros de runtime (ou seja, precisamos passar código javascript VÁLIDO)

• Quando um erro ocorre, o javascript gera um objeto contendo detalhes sobre isso. Esse objeto é passado
  como argumento do catch.

• Hoje em dia passar argumento para o bloco catch é opcional.

• O erro dentro do argumento do bloco catch tem as propriedades name,message e stack.
  Name sendo o nome do erro, message a mensagem sobre o erro e stack a string com
  informações sobre a sequência de chamadas aninhadas que levaram ao erro.
  Geralmente stack é utilizado para debugar o código

• Só irá entrar no bloco do catch se algo errado ocorrer no bloco try. Como se fosse um if/else

• Sendo assim, a sintaxe do bloco try/catch fica : try { //bloco de código que queremos evitar que quebre a aplicação }
						   catch (erro) {
							console.log(erro) // imprime o erro que foi capturado pelo try
							//bloco de código que irá ser executado caso um erro tenha
							 ocorrido no bloco try



		try {
			console.log(			bob + 10)
		    }
		catch(erro) {
				console.log(erro) // ReferenceError: bob is not defined
				console.log("Algo deu errado") // Algo deu errado
				let bob = 5
				console.log(bob + 10) // 15
			    }


		try {
			console.log("Oi") // Oi
		    }
	        catch(erro) {
				console.log(erro) // Não irá entrar nesse bloco
			    }






		*************************************************
		*				  		*
		*  Lançando nossos próprios "erros" -	Throw   *
		*				                *
		*				                *
		*************************************************

• Podemos lançar nossos próprios erros através da palavra "Throw". 
  Isso pode ser utilizado quando um erro de fato não ocorre, mas queremos forçar
  um erro caso algo não esteja de acordo com o que estamos esperando.

• Tem como sintaxe Throw <nome do objeto de erro> 

• Alguns tipos de objeto de erro : Error , SyntaxError , ReferenceError, TypeError

• Podemos também criar nosso próprio objeto de erro, passando como argumento uma mensagem. A variável
  a ele atribuída será o "name".

• É bom para complementar um bloco try catch, por exemplo

• Caso a condição do throw seja atingida, o restante do código dentro do bloco try não é executado
  e pula para o bloco catch





		*********************************
		*				*
		* Relançando "erros" -	Throw   *
		*				*
		*			        *
		*********************************

• É uma boa prática o bloco catch só processar erros que ele conhece e "relançar" os demais.

• Basicamente usamos o throw dentro do bloco catch analisando o erro capturado pelo bloco.

• Para fazermos essa análise do erro usamos o "instanceof" 

• Tem como sintaxe :  try { } catch (err) {  if (!(err instanceof SyntaxError)) { throw err  } }



		****************************************************************************
		*									   *
		* Executando um bloco independente de encontrar ou não um erro - finally   *
		*									   *
		*			                                                   *
		****************************************************************************

• O bloco finally faz o código que está dentro dele rodar independentemente de um erro ser capturado ou não

• Ele roda após o try caso nenhum erro seja capturado

• Roda após o catch caso algum erro seja capturado

• Geralmente é utilizado quando começamos a fazer algo e queremos finalizar independentemente de algo .

• Funciona mesmo se tiver um return dentro de um bloco try/catch

• Podemos utilizar somente o try{} finally{} . A diferenca é que o erro não será tratado e será "esquecido" . Pode ser utilizado em conjunto quando
  não queremos tratar um erro mas queremos que uma ação iniciada seja finalizada.

• Tem como sintaxe : try {} catch (err) {} finally {}

