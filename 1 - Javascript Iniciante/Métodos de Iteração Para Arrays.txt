		*************************************************************************
		*                                                            		*
		*    Métodos de iteração com um array 					*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*    Chamando uma função para cada elemento do array - forEach		*
		*                                                            		*
		*************************************************************************

• O método forEach chama uma função callback uma vez para cada elemento do array.

• Aceita três argumentos : o valor do item, o index do item, o array em iteração

• Ele não é invocado em propriedades de índices deletados ou que não foram inicializados (um espaço vazio de um array por ex)

• Retorna undefined (ou seja ,não retorna nada)

• Altera o array original

• Tem como sintaxe : array.forEach((valorDoItem, indexDoItem, arrayIteracao) =>  { })



		const numbers = [40, 100, 1, 5, 25, 10]

		numbers.forEach((itemValue, indexItem, arrayIteracao) => {
  			  console.log(itemValue)
    				console.log(indexItem)
    				console.log(arrayIteracao)
		}) // 40 0 [ 40, 100, 1, 5, 25, 10 ]
		   // 100 1 [ 40, 100, 1, 5, 25, 10 ]
		   // 1 2 [ 40, 100, 1, 5, 25, 10 ]
 		   // 5 3 [ 40, 100, 1, 5, 25, 10 ]
		   // 25 4 [ 40, 100, 1, 5, 25, 10 ]
		  //  10 5 [ 40, 100, 1, 5, 25, 10 ]
	


		*************************************************************************
		*                                                            		*
		*    Chamando uma função para cada elemento do array -  map()     	*
		*                                                            		*
		*************************************************************************

• O método map() chama uma função callback uma vez para cada elemento do array.

• Aceita três argumentos : o valor do item, o index do item, o array em iteração

• Ele não é invocado em propriedades de índices deletados ou que não foram inicializados (um valor vazio de um elemento 
  do array por ex)

• A lista de elementos que serão processados pelo map é montada antes da primeira invocação à função callback. 
  Se um elemento for acrescentado ao array original após a chamada ao map, ele não será visível para o callback. 
  Se os elementos existentes forem modificados, os valores que serão repassados serão os do momento em que o 
  método map invocar o callback. Elementos removidos não serão visitados.

• Não altera o array original. Porém a função callback pode mudar.

• Retorna um novo array performando a função callback uma vez em cada elemento do array original

• Deve SEMPRE ter um retorno, já que retorna um novo array.


		const numbers = [40, 100, 1, 5, 25, 10]

	        numbers.map((valor,index,array) => console.log(valor * 2)) // 80 200 2 10 50 20

		

		

		*************************************************************************
		*                                                            		*
		*     flatMap()								*
		*                                                            		*
		*************************************************************************



		*************************************************************************
		*                                                            		*
		*     filter()								*
		*                                                            		*
		*************************************************************************



		*************************************************************************
		*                                                            		*
		*     reduce()								*
		*                                                            		*
		*************************************************************************




		*************************************************************************
		*                                                            		*
		*     reduceRight()							*
		*                                                            		*
		*************************************************************************




		*************************************************************************
		*                                                            		*
		*     every()								*
		*                                                            		*
		*************************************************************************



		*************************************************************************
		*                                                            		*
		*     some()								*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*     from()								*
		*                                                            		*
		*************************************************************************



		*************************************************************************
		*                                                            		*
		*     keys()								*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*     entries()								*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*     with()								*
		*                                                            		*
		*************************************************************************