		*************************************************************************
		*                                                            		*
		*    Métodos de iteração com um array 					*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*    Chamando uma função para cada elemento do array - forEach		*
		*                                                            		*
		*************************************************************************

• O método forEach chama uma função callback uma vez para cada elemento do array.

• Aceita três argumentos : o valor do item, o index do item, o array em iteração

• Ele não é invocado em propriedades de índices deletados ou que não foram inicializados (um espaço vazio de um array por ex)

• Retorna undefined 

• Não modifica o array original, entretanto o retorno da função chamada por ele pode fazer isso

• Não é encadeável, uma vez que retorna undefined.

• Tem como sintaxe : array.forEach((valorDoItem, indexDoItem, arrayIteracao) =>  { })



		const numbers = [40, 100, 1, 5, 25, 10]

		numbers.forEach((itemValue, indexItem, arrayIteracao) => {
  			  console.log(itemValue)
    				console.log(indexItem)
    				console.log(arrayIteracao)
		}) // 40 0 [ 40, 100, 1, 5, 25, 10 ]
		   // 100 1 [ 40, 100, 1, 5, 25, 10 ]
		   // 1 2 [ 40, 100, 1, 5, 25, 10 ]
 		   // 5 3 [ 40, 100, 1, 5, 25, 10 ]
		   // 25 4 [ 40, 100, 1, 5, 25, 10 ]
		  //  10 5 [ 40, 100, 1, 5, 25, 10 ]


		
		numbers.forEach((itemValue, indexItem, arrayIteracao) =>  itemValue * 2 ) // undefined


		*************************************************************************
		*                                                            		*
		*    Chamando uma função para cada elemento do array -  map()     	*
		*                                                            		*
		*************************************************************************

• O método map() chama uma função callback uma vez para cada elemento do array.

• Aceita três argumentos : o valor do item, o index do item, o array em iteração

• Ele não é invocado em propriedades de índices deletados ou que não foram inicializados (um valor vazio de um elemento 
  do array por ex)

• A lista de elementos que serão processados pelo map é montada antes da primeira invocação à função callback. 
  Se um elemento for acrescentado ao array original após a chamada ao map, ele não será visível para o callback. 
  Se os elementos existentes forem modificados, os valores que serão repassados serão os do momento em que o 
  método map invocar o callback. Elementos removidos não serão visitados.

• Não altera o array original. Porém a função callback, se invocada, pode mudar.

• É encadeável, ou seja, podemos chamar outros métodos após executar um map() em um array.

• Retorna um novo array performando a função callback uma vez em cada elemento do array original

• Tem como sintaxe : array.map((valor,index,array) => {})



		const numbers = [40, 100, 1, 5, 25, 10]

	        numbers.map((valor,index,array) => valor * 2) // 80 200 2 10 50 20

		

		**************************************************************
		*                                                            *
		*  Iterando e reduzindo o nível de um array -  flatMap()     *
		*                                                            *
		**************************************************************

• O método chama uma função callback uma vez para cada elemento do array

• O método flatMap() primeiro mapeia cada elemento usando uma função de mapeamento e, em seguida,
  nivela o resultado em um novo array. É idêntico a um map seguido por um flat de profundidade 1,
  mas flatMap é bastante útil e mescla ambos em um método um pouco mais eficiente.

• Aceita três argumentos : o valor do item, o index do item, o array em iteração

• Retorna um novo array com cada elemento sendo o resultado da função callback e achatado ao valor de 1.

• Ele itera sobre o array e concatena arrays internos a ele caso existam.

• Caso possua mais de um nível de array interno, o correto é usarmos o flatMap e depois usarmos o flat para reduzirmos
  o nível do array retornado.

• Tem como sintaxe : array.flatMap((valor,index,array) => {})

		
		const arr = [1, 2, [3, [4, 5, [6, 7]]]] ;

		console.log(arr.flatMap((element) => element).flat(2)) ; // [1, 2, 3, 4, 5, 6, 7]




		****************************************************************************************
		*                                                            			       *
		*   Criando um novo array a partir de um filtro nos elementos de um array -  filter()  *								*
		*                                                            			       *
		****************************************************************************************

• O método filter() cria um novo array com elementos do array original que "passam de um teste"

• O método chama uma função callback uma vez para cada elemento do array

• Retorna um novo array com os elementos que passaram no teste descrito na função callback

• filter() chama a função callback fornecida, uma vez para cada elemento do array, e constrói
  um novo array com todos os valores para os quais o callback retornou o valor true ou um valor
  que seja convertido para true. O callback é chamado apenas para índices do array que possuem 
  valores atribuídos; Ele não é invocado para índices que foram excluídos ou para aqueles que 
  não tiveram valor atribuído. Elementos do array que não passaram no teste do callback são 
  simplesmente ignorados, e não são incluídos no novo array.

• Não altera o array original

• Aceita três argumentos : o valor do item, o index do item, o array em iteração

• Tem como sintaxe : array.filter((valor,index,array) => {})

		
                let arr = [10,1,50,100,20,30,40]
		
		let arrayFiltrado = arr.filter((valor) => valor > 10) // 50,100,20,30,40



		*************************************************************************
		*                                                            		*
		*   Reduzindo os valores de um array a um único valor -  reduce()	*
		*                                                            		*
		*************************************************************************

• O método reduce roda uma função de callback em cada elemento do array com a intenção de produzir (reduzir) esse array
  a um único valor.

• O método funciona do lado esquerdo do array até o lado direito. 

• Não altera o array original, na verdade ele retorna um novo array com o resultado produzido.

• Aceita 4 argumentos : valor inicial/ valor retornado do calll back anteriormente também chamado de acumulador,
			o valor atual do item ,o index atual do item, o array em iteração

• Além disso, fora da função callback é aceito um valor inicial também. 

• A primeira vez que o callback é chamado, o acumulador e o valorAtual podem ter um de dois valores possíveis. 
  Se o valorInicial tiver sido fornecido na chamada à função reduce(), então o acumulador será igual ao valorInicial 
  e o valorAtual será igual ao primeiro valor no array. Caso nenhum valorInicial seja fornecido, acumulador 
  será igual ao primeiro valor no array, e valorAtual será igual ao segundo.

•  Se o valorInicial não tiver sido passado como argumento, então reduce() executará o callback da função 
   começando a partir do índice 1 (index 1), pulando o primeiro índice (index 0). Se o valorInicial for
   passado como argumento, a função irá começar no index 0


• Se o array estiver vazio e o valorInicial não tiver sido informado, uma exceção do tipo TypeError será lançada.

• Se o array possuir somente um elemento (independente da posição) e o valorInicial não tiver sido fornecido,
  ou se valorInicial for fornecido, mas a array estiver vazia, o valor será retornado sem que a função de callback
  seja chamada.

• É mais seguro prover um valorInicial, porque existem até quatro possíveis saídas sem o valorInicial

• O valor de retorno da sua função reducer é atribuída ao acumulador.
  O acumulador, com seu valor atualizado, é repassado para cada iteração subsequente pelo array, que por fim,
  se tornará o valor resultante, único, final


• Usar Array.filter() seguido por Array.map() faz com que o array seja percorrido duas vezes. 
  Você pode obter o mesmo resultado percorrendo o array apenas uma vez com Array.reduce(), o que é,
  portanto, mais eficiente


• O método reduceRight() faz a mesma coisa e possui as mesmas características. A diferença é que ao invés
  de iterar da esquerda para direita, ele faz da direita para a esquerda.

• Tem como sintaxe : array.reduce((acumulador,valorAtual,indexAtual,array) => {} , valorInicial)


		
		const numbers = [45, 4, 9, 16, 25];

		let soma = numbers.reduce((acumulador, valor) => acumulador + valor)

		console.log(soma) // 99

		let soma = numbers.reduce((acumulador, valor) => acumulador + valor,10)

		console.log(soma) // 109
		



		***************************************************************************************************
		*                                                            					  *
		*   Testando se todos os elementos passam pelo teste passado pela função fornecida -  every()	  *
		*                                                            					  *
		***************************************************************************************************

• Retorna true ou false

• Não modifica o array original

• O método every executa a função callback fornecida uma vez para cada elemento presente no array, até encontrar
 algum elemento em que a função retorne um valor false (valor que se torna false quando convertido para boolean). 
 Se esse elemento é encontrado, o método every imediatamente retorna false. Caso contrário, se a função callback 
 retornar true para todos elementos, o método retorna true. A função callback é chamada apenas para os elementos
 do array original que tiverem valores atribuídos; os elementos que tiverem sido removidos ou os que nunca tiveram 
 valores atribuídos não serão considerados.

• A função callback é chamada com três argumentos: o valor do elemento corrente, o índice do elemento corrente e o 
  array original que está sendo percorrido

• Somente o primeiro argumento é obrigatório

• A lista de elementos que serão processados pelo every é montada antes da primeira chamada da função callback.
  Se um elemento for acrescentado ao array original após a chamada ao every , ele não será visível para o callback. 
  Se os elementos existentes forem modificados, os valores que serão repassados serão os do momento em que o método 
  every chamar o callback. Elementos removidos não serão considerados.

• every funciona como o qualificador "for all" em matemática. Particularmente, para um vetor vazio, é retornado true.
  (É verdade por vacuidade que todos os elementos do conjunto vazio satisfazem qualquer condição.)

• Tem como sintaxe : array.every((valorElementoAtual , index , array) => condição) 


		
		let arr = [12, 5, 8, 130, 44]
		
		arr.every((elem) => elem >= 10); // false
		
		arr.every((elem) => elem >= 10); // true



		*******************************************************************************************************************
		*                                                            							  *
		*   Testando se ao menos um dos elementos do array passam pelo teste passado pela função fornecida -  some()	  *
		*                                                            						  	  *
		*******************************************************************************************************************

• O método some() testa se ao menos um dos elementos no array passa no teste implementado pela função atribuída
  e retorna um valor true ou false.

• Não modifica o array original

• some() executa a função callback uma vez para cada elemento presente no array até achar um onde o callback retorne
  um valor true. Se em qualquer dos elementos o valor for encontrado, some() imediatamente retorna true. Caso contrario, 
  some() retorna false. callback é invocado somente para índices do array que contenham valor definido; não é 
  invocado para índices que foram deletados ou os quais nunca tiveram valor definido.

• A função callback é chamada com três argumentos: o valor do elemento corrente, o índice do elemento corrente e o 
  array original que está sendo percorrido

• Somente o primeiro argumento é obrigatório

• O intervalo de elementos processado por some() é definido antes da primeira invocação da callback. 
  Elementos contidos no array antes da chamada some() ser iniciada não serão testados pela callback. 
  Se algum elemento pertencente ao array for alterado pela callback, o valor passado para a callback 
  será o valor do momento em que a função some() encontra o índice daquele elemento.
  Elementos deletados não são testados.


• Tem como sintaxe : array.some((valorElementoAtual , index , array) => condição) 


		let arr = [2,5,8,1,4]
				
		arr.some((elem) => elem > 10); // false

		arr.some((elem) => elem > 10); // true




		**************************************************************************************
		*                                                            			     *
		*   Criando um array a partir de um "Array Like" ou um Objeto Iterável -   from()    *
		*                                                            			     *
		**************************************************************************************

• O método Array.from() cria uma nova instância de um Array quando for passado um array-like ou um iterable object 
  como argumento.

• No ES6, a sintaxe de classe permite a subclassificação de classes nativas e classes definidas pelo usuário;
  como resultado, os métodos estáticos pertencentes a classe, como Array.from, são "herdadas" por subclasses 
  do Array e criam novas instâncias da subclasse, não do Array

• Pode receber como argumentos um array like e uma funçõa map que será chamada para cada elemento do array

• Somente o primeiro argumento (array like) que é obrigatório

• Array.from() deixa você criar um Array de:
  - objetos array-like (objetos com a propriedade length e elementos indexados); ou
  - Objetos iteráveis (objetos onde você pode coletar seus elementos, assim como Map e Set)

• Array.from() tem um parametro opcional mapFn, que permite executar a função map para cada elemento do array 
 (ou subclasse de objeto) que está sendo criado. Simplificando, Array.from(obj, mapFn, thisArg) é o mesmo que
  Array.from(obj).map(mapFn, thisArg), com a excessão de não cria um array intermediário . 
 Isso é importante, principalmente para certas subclasses de array, como typed array, no qual o array 
 intermediário iria necessáriamente ter o valor truncado para encaixar-se no tipo apropriado.

• A propriedade length do método from() é 1

• No ES2015, a sintaxe de class permite a definição de subclasses tanto internas quando definidas pelo usuário. 
 Como resultado, métodos estáticos como Array.from() são "herdados" pelas subclasses de Array, e cria novas 
 instâncias da subclasse, não de Array.


• Tem como sintaxe : Array.from(objetoArrayLike, funcaoMap)


		// Array-like object (arguments) para um Array
		function f() {
  		return Array.from(arguments);
		}

		f(1, 2, 3); // [1, 2, 3]

		

		// Qualquer iterable object ...
		// com Set
		var s = new Set(["foo", window]);
		Array.from(s); // ["foo", window]

		

		// Map
		
		var m = new Map([
				  [1, 2],
				  [2, 4],
				  [4, 8],
			       ]);
		
		Array.from(m); // [[1, 2], [2, 4], [4, 8]]



		// String
		
		Array.from("foo"); // ["f", "o", "o"]


		
		// Usando um arrow function como função map para manipular os elementos
		
		Array.from([1, 2, 3], (x) => x + x); // [2, 4, 6]

		
		// Gerando uma sequência de números
		
		Array.from({ length: 5 }, (v, k) => k); // [0, 1, 2, 3, 4]



		*************************************************************************
		*                                                            		*
		*     keys()								*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*     entries()								*
		*                                                            		*
		*************************************************************************


		*************************************************************************
		*                                                            		*
		*     with()								*
		*                                                            		*
		*************************************************************************