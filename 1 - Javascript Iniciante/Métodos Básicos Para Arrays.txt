	***************************************************************
	*                                                             *
        *       Métodos básicos disponíveis para Listas / Arrays      *
        *                                                             *
        ***************************************************************




		*************************************************************************
		*                                                            		*
		*      Retornando o tamanho de uma lista/array - Propriedade length     *
		*                                                            		*
		*************************************************************************

• A propriedade length retorna o tamanho de um array, ou seja, quantos itens nele estão inseridos.

• Por ser uma propriedade a sintaxe fica : array.length

	
		const frutas = ["Banana", "Maçã", "Uva", "Morango"]

		console.log(frutas.length) // 4



		**********************************************************************************************************
		*                                                            						 *
		*      Convertendo um array para uma string dos valores do array (separado por vírgula) - toString()     *
		*                                                            						 *
		**********************************************************************************************************

• Todos os objetos javascript possuem o método toString()

• O javascript converte automaticamente um array em string separada por vírgulas quando um valor primitivo é aguardado.

• O método toString() converte um array para uma string de valores do array separado por vírgula.

• É como se só removessemos o conteúdo do array e tranformássemos em strings separando cada item por vírgula

• Não altera o array original, sendo uma boa prática criarmos uma variável para armazenar esse resultado retornado

• Tem como sintaxe : array.toString()


		const frutas = ["Banana", "Maçã", "Uva", "Morango"]

		console.log(frutas.toString()) // Banana,Maçã,Uva,Morango



		*************************************************
		*                                               *
		*      Acessando um item de um array - at()     *
		*                                               *
		*************************************************

• O método at() retorna o elemento indexado do array

• O método at() retorna o mesmo que passar o index entre []

• array.at(1) é o mesmo que array[1]

• A diferença do método at() para passarmos o index através de [], é que o método at() aceita indexes negativos. 
  Quando passamos indexes negativos ele começa no -1(último item) até o seu length (negativo).
  Caso tenhamos um array de length 4, então, poderíamos utilizar o método at() de -1 até o -4.
  

• Tem como sintaxe : array.at(indexDoArray)



		const frutas = ["Banana", "Maçã", "Uva", "Morango"]

		frutas.at(0) // Banana
		
		frutas[0] // Banana

		frutas.at(-1) // Morango



		**********************************************************************************************************
		*                                                            						 *
		*      Convertendo um array para uma string dos valores do array (escolhendo o separador) - join()       *
		*                                                            						 *
		**********************************************************************************************************

• É parecido com o toString() a diferença é que ao converter um array para uma string de valores do array, nós podemos
  passar qual o separador que será utilizado.

• Não altera o array original, sendo uma boa prática criarmos uma variável para armazenar o resultado retornado

• É como se só removessemos o conteúdo do array e tranformássemos em strings separando cada item por um separador especificado
  por nós mesmos.

• Tem como sintaxe : array.join("-")



		const frutas = ["Banana", "Maçã", "Uva", "Morango"]


		console.log(frutas.join("-")) // Banana-Maçã-Uva-Morango

		console.log(frutas.join("")) // BananaMaçãUvaMorango



 		********************************************************
		*						       *
		*    Removendo o primeiro item de um array - shift()   *
		*						       *
 		********************************************************

• O método shift() remove o primeiro item de um array e consequentemente move todos os outros elementos
  para o index em que estão -1. Ou seja, um item que estava no index 4, passa a ficar no index 3 e assim sucessivamente.

• O retorno do método vai ser justamente esse valor que foi removido.

• Altera o array original.

• Tem como sintaxe : array.shift()


		const frutas = ["Banana", "Maçã", "Uva", "Morango"]


		console.log(frutas.shift()) // Banana


 		********************************************************
		*						       *
		*      Removendo o último item de um array - pop()     *
		*						       *
 		********************************************************

• O método pop remove o último item de um array

• O retorno do método vai ser justamente o valor que foi removido

• Altera o array original.

• Tem como sintaxe : array.pop()


		const frutas = ["Banana", "Maçã", "Uva", "Morango"]


		console.log(frutas.pop()) // Morango



 		**********************************************************
		*						      	 *
		*   Adicionando um item ao início do array - unshift()   *
		*						         *
 		**********************************************************

• O método unshift() adiciona um item ao array, na posição inicial (index 0).

• O retorno do método vai ser o novo length(tamanho) do array.

• Por conta do método adicionar um item ao index 0 do array ele consequentemente move todos os outros elementos
  para o index em que estão +1. Ou seja, um item que estava no index 4, passa a ficar no index 5 e assim sucessivamente.

• Como o método adiciona um item, devemos passar como argumento o valor que queremos adicionar ao array.

• Altera o array original.

• Tem como sintaxe : array.unshift(valor)


		const frutas = ["Banana", "Maçã", "Uva", "Morango"]


		console.log(frutas.unshift("Kiwi")) // 5


 		********************************************************
		*						       *
		*     Adicionando um item ao final do array - push()   *
		*						       *
 		********************************************************

• O método push adiciona um item ao array, na posição(index) final.

• O retorno do método vai ser o novo length(tamanho) do array.

• Altera o array original.

• Como o método adiciona um item, devemos passar como argumento o valor que queremos adicionar ao array.

• Tem como sintaxe : array.push(valor)


		const frutas = ["Banana", "Maçã", "Uva", "Morango"]


		console.log(frutas.push("Kiwi")) // 5


 		****************************************************************************
		*						       			   *
		*   Adicionando um item ao final do array através da propriedade length    *
		*						                           *
 		****************************************************************************

• A propriedade .length anteriormente vista pode também servir para adicionarmos um elemento em um array.

• Isso é realizado acessando o length (tamanho) do array e associando a esse length um valor.

• Altera o array original.

• Tem como sintaxe : array[array.length] = valor



		const frutas = ["Banana", "Maçã", "Uva", "Morango"]

		frutas[frutas.length] = "Kiwi"

		console.log(frutas) // [ 'Banana', 'Maçã', 'Uva', 'Morango', 'Kiwi' ]



 		*********************************************
		*				    	    *
		*   Deletando um item de um array - delete  *
		*				    	    *
 		*********************************************

• Não é recomendado utilizar esse método, uma vez que ele deixa valores undefined ao longo do caminho.

• Ao invés disso ,o ideal é utilizar pop() ou shift()

• Tem como sintaxe : delete array[index]


		const frutas = ["Banana", "Maçã", "Uva", "Morango"]

		delete frutas[0]

		console.log(frutas) // [ <1 empty item>, 'Maçã', 'Uva', 'Morango' ]



 		**********************************************************
		*				    		      	 *
		*  Mergeando/Concatenando um ou mais arrays - concat() 	 *
		*				    		      	 *
 		**********************************************************

• Concatenar significa juntar strings do início ao fim. Concatenar arrays é a mesma coisa, juntar arrays do início ao fim.

• O método concat() cria um novo array concatenando arrays existentes.

• Podemos passar quantos arrays quisermos como argumento desse método.

• Podemos passar também strings como argumentos desse método.

• Esse método nunca altera os arrays existentes e SEMPRE retorna um novo array.

• Por retornar um novo array, é uma boa prática sempre criarmos uma variável para armazenar esse array concatenado.

• Tem como sintaxe : array1.concat(arr2,arr3,arr4,arrN,"string1","string N")


		const mulheresArray = ["Emilia", "Roberta"];
	
		const homensArray = ["João"];

		const juncaoArrays = mulheresArray.concat(homensArray,"Paulo")

		console.log(juncaoArrays) // ["Emilia", "Roberta", "João", "Paulo"]
		
		console.log(mulheresArray.concat(homensArray,"Paulo")) // ["Emilia", "Roberta", "João", "Paulo"]



 		******************************************************************************************
		*				    		      	 				 *
		*  Copiando elementos do array para uma outra posição do mesmo array - copyWithin() 	 *
		*				    		      	 				 *
 		******************************************************************************************

• O método copyWithin() copia elementos de um array para uma outra posição dentro do mesmo array.

• Altera o array original.

• O método sobrescreve valores existentes.

• O método NÃO adiciona itens ao array.

• Esse método copia os valores, sobrescreve a partir do index citado, e empurra os itens do index citado para os próximos indexes

• Não altera o tamanho do array.

• Aceita ATÉ 3 argumentos. Sendo o primeiro o index para qual index copiar, o segundo a partir de qual index copiar 
 e o terceiro até qual index copiar (excluído).

• Caso não passemos o terceiro argumento, ele copia até o index em que passamos para colar a cópia.

• Tem como sintaxe: array.copyWithin(indexParaColarACopia, indexInicialDeCopia , indexFinalDeCopia)



		const frutas = ["Banana", "Maçã", "Uva", "Morango", "Kiwi"]

		console.log(frutas.copyWithin(2, 0, 2)) // [ 'Banana', 'Maçã', 'Banana', 'Maçã', 'Kiwi' ]

		
		const frutas = ["Banana", "Maçã", "Uva", "Morango", "Kiwi", "Jamelão"]

		onsole.log(frutas.copyWithin(2, 0)) //[ 'Banana', 'Maçã', 'Banana', 'Maçã', 'Uva', 'Morango' ]



 		***************************************************************************
		*				    		   	   	 	  *
		*   Reduzindo a profundidade/limpando espaços vazios de um array - flat() *
		*									  *
                *									  *
 		***************************************************************************

• O método flat() cria um novo array com todos elementos sub-arrays concatenados nele de forma recursiva até a 
  profundidade especificada

• Não altera o array original, sendo uma boa prática criarmos uma variável para armazenar esse novo array retornado

• Podemos especificar até qual profundidade queremos "achatar" / reduzir a dimensionalidade do array. 
  Podemos utilizar a palavra Infinity para reduzir a nível uni-dimensional não importando quantos níveis
  o array possua.

• O argumento do método é opcional , sendo o padrão "1" , ou seja, apenas um nível.

• O método flat() também remove espaços vazios em um array .

• Tem como sintaxe : array.flat(profundidade) 


		let arr1 = [1, 2, [3, 4]];
		
		arr1.flat(); // [1, 2, 3, 4]



		let arr2 = [1, 2, [3, 4, [5, 6]]];
		
		arr2.flat(); // [1, 2, 3, 4, [5, 6]]




		let arr3 = [1, 2, [3, 4, [5, 6]]];
		
		arr3.flat(2); // [1, 2, 3, 4, 5, 6]



		const arr4 = [1, 2, [3, 4, [5, 6, [7, 8]]]];
		
		arr4.flat(Infinity); // [1, 2, 3, 4, 5, 6, 7, 8]


		let arr5 = [1, 2, , 4, 5];
 
		arr5.flat(); // [1, 2, 4, 5]





 		*************************************************************************************
		*				                                                    *
		*  Adicionando/Removendo elementos de um array na posição que quisermos - splice()  *
		*		                                       				    *				    		      			                         *
 		*************************************************************************************

• Podemos utilizar o método splice() para adicionar/remover elementos em um array na posição desejada.

• Esse método aceita 2 argumentos "fixos", e o terceiro como "variante"(não obrigatório e contendo quantos elementos quisermos)
  O primeiro argumento é a posição aonde um ou mais elementos serão adicionados 
  O segundo argumento é quantos elementos serão removidos 
  Do terceiro em diante é a definição dos novos elementos que serão adicionados (não obrigatório)

• Caso passemos 1 ou mais como segundo argumento, o método irá retornar um array com os itens deletados/removidos

• O array original É alterado.

• Podemos utilizar esses métodos tanto para adicionarmos elementos quanto para removermos.

• Para adicionarmos, vamos passar como segundo argumento 0, uma vez que não queremos remover nenhum item do array, 
  e sim apenas adicionar.

• Para removermos , como segundo argumento selecionaremos quantos elementos queremos remover. Podemos nesse caso 
  passar como primeiro argumento tanto 0 (quando não queremos adicionar nenhum, somente remover), quanto podemos
  passar um número de itens que também serão adicionados. Dessa forma itens serão adicionados e excluídos
  ao mesmo tempo.

• A vantagem de remover itens de um array com esse método é que ele não deixa "buraco" no array.

• Caso passemos 0 no segundo argumento, o método não retornará nada,uma vez que nenhum item foi removido do array.

• A sintaxe fica : array.splice(posicaoElementosAdicionados, quantosElementosRemover, elementosAdicionar) 
						  

		const fruits = ["Banana", "Orange", "Apple", "Mango"];
	
		fruits.splice(2, 0, "Lemon", "Kiwi") 

		console.log(fruits) // [ 'Banana', 'Orange', 'Lemon', 'Kiwi', 'Apple', 'Mango' ]

		
		const fruits = ["Banana", "Orange", "Apple", "Mango"];
		
		console.log(fruits.splice(2, 2, "Lemon", "Kiwi")) // [ 'Apple', 'Mango' ]

		console.log(fruits) // [ 'Banana', 'Orange', 'Lemon', 'Kiwi' ]


		const fruits = ["Banana", "Orange", "Apple", "Mango"];
		
		console.log(fruits.splice(0, 1)) // [ 'Banana' ]

		console.log(fruits) // [ 'Orange', 'Apple', 'Mango' ]




 		***************************************************************************************
		*				                                                      *
		*  Adicionando/Removendo elementos de um array na posição que quisermos - toSpliced() *
		*				    		      	 	 	              *
 		***************************************************************************************

• Em contrapartida ao splice que ALTERA o array original, o método toSpliced não altera o array original,
  retornando um novo array, sendo uma boa prática criarmos uma variável para armazenar esse novo array retornado.

• Podemos utilizar o método toSpliced() para adicionar/remover elementos em um array na posição desejada.

• Esse método aceita 2 argumentos "fixos", e o terceiro como "variante"(não obrigatório e contendo quantos elementos quisermos)
  O primeiro argumento é a posição aonde um ou mais elementos serão adicionados 
  O segundo argumento é quantos elementos serão removidos 
  Do terceiro em diante é a definição dos novos elementos que serão adicionados (não obrigatório)

• Caso passemos 1 ou mais como segundo argumento, o método irá retornar o array inteiro sem os itens que foram
 removidos. Ao invés de retornar um array com os itens que foram removidos como o splice()

• Podemos utilizar esses métodos tanto para adicionarmos elementos quanto para removermos.

• Para adicionarmos, vamos passar como segundo argumento 0, uma vez que não queremos remover nenhum item do array, 
  e sim apenas adicionar.

• Para removermos , como segundo argumento selecionaremos quantos elementos queremos remover. Podemos nesse caso 
  passar como primeiro argumento tanto 0 (quando não queremos adicionar nenhum, somente remover), quanto podemos
  passar um número de itens que também serão adicionados. Dessa forma itens serão adicionados e excluídos
  ao mesmo tempo.

• A vantagem de remover itens de um array com esse método é que ele não deixa "buraco" no array.

• Caso passemos 0 no segundo argumento, o método não retornará nada,uma vez que nenhum item foi removido do array.

•  A sintaxe fica : array.toSpliced(posicaoElementosAdicionados, quantosElementosRemover, elementosAdicionar)
						  

		const fruits = ["Banana", "Orange", "Apple", "Mango"];
	
		fruits.toSpliced(2, 0, "Lemon", "Kiwi") 

		console.log(fruits) // [ 'Banana', 'Orange', 'Apple', 'Mango' ]

		
		const fruits = ["Banana", "Orange", "Apple", "Mango"];
		
		console.log(fruits.toSpliced(2, 2, "Lemon", "Kiwi")) // [ 'Banana', 'Orange', 'Lemon', 'Kiwi' ]

		console.log(fruits) // [ 'Banana', 'Orange', 'Apple', 'Mango' ]


		const fruits = ["Banana", "Orange", "Apple", "Mango"];
		
		console.log(fruits.toSpliced(0, 1)) // [ 'Orange', 'Apple', 'Mango' ]

		console.log(fruits) // [ 'Banana', 'Orange', 'Apple', 'Mango' ]



 		*******************************************************************
		*				                                  *
		*  "Recortando" um pedaço de um array em um novo array - slice()  *
		*				    		      	 	  *
 		*******************************************************************

• O método slice() "corta" um pedaço de um array em um novo array

• Cria um novo array.

• Não remove elemento algum do array de origem (ou seja, não altera o array original). Por conta disso, é uma 
  boa prática criarmos uma variável para receber esse novo array gerado.

• Recebe até 2 argumentos. Sendo o primeiro o index de onde começará o recorte e o segundo até aonde irá recortar
 sendo esse segundo não incluído. Ou seja, caso passemos 0 e 2, ele irá recortar somente os indexes 0 e 1.

• Apenas o primeiro argumento é obrigatório.

• Caso o segundo argumento seja omitido, irá começar o recorte do index informado e irá até o final do array.

•  A sintaxe fica : array.slice(indexComeçoRecorte, indexFimRecorte)


		const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
		
		const citrus = fruits.slice(3);

		console.log(fruits) // ["Banana", "Orange", "Lemon", "Apple", "Mango"]

		console.log(citrus) // ["Apple", "Mango"]



		const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
		
		const citrus = fruits.slice(1, 3)

		console.log(citrus) // ["Orange","Lemon"]



		const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
		
		const citrus = fruits.slice(2)

		console.log(citrus) // [ 'Lemon', 'Apple', 'Mango' ]

