
		********************************
		*                              *
		*           Objeto             *
		*                              *
		********************************



• Tem o formato -> propriedade : valor

• O valor pode ser de qualquer tipo. Seja de estrutura de dados , seja dos tipos de valores básicos do javascript.

• A propriedade sempre será uma string e o valor da mesma pode ser de qualquer tipo

• Funções dentro de objetos são chamadas de métodos

• A notação de acesso as propriedades de um objeto por meio do . só funciona caso não possua espaço, não comece com dígito
 e não inclua caracteres especiais ($ e _ são permitidos)

• O nome de uma propriedade de um objeto , ao contrário do que ocorre com variáveis , pode conter o nome de palavras reservadas




  ************************************************************************
  *                                                                      *
  *             Exemplo de Objeto :                                      *
  *                                                                      *
  *            let usuario = {                                           *
  *  		  nome: "Joao",                                          *
  * 		 idade: 29,                                              *
  *      	"sobrenome e apelido" : "Machado da Cruz"                *
  *  		eMaiorDeIdade : true,                                    *
  *  		falar: function () {                                     *
  *  			console.log("Oi")                                *
  *			}                                                *
  *       	 }                                                       *
  *                                                                      *
  ************************************************************************



  ************************************************************************
  *                                                                      *
  *  Sintaxe / Estrutura :  Acessando valor de propriedade de um objeto  *
  *                                                                      * 
  *                                                                      *
  ************************************************************************

• Para acessar o valor de uma propriedade , basta digitarmos : nomeDoObjeto.propriedade

	console.log(usuario.nome) // imprime Joao


• Caso seja um objeto com uma propriedade não simples  , precisamos utilizar nomeDoObjeto["nome da propriedade"] 

        console.log(usuario["sobrenome e apelido"]) // imprime "Machado da Cruz" 


• Para acessarmos uma função dentro de um objeto basta digitarmos : nomeDoObjeto.funcao()

	usuario.falar() // imprime Oi


  ************************************************************************
  *                                                                      *
  *  Sintaxe / Estrutura :  Criando/Adicionando propriedade em um objeto *
  *                                                                      * 
  *                                                                      *
  ************************************************************************


• Para criarmos/adicionarmos uma propriedade , basta digitarmos : nomeDoObjeto.nomeNovaPropriedade = valorNovaPropriedade

	usuario.eCasado = true // já que não existe a propriedade "eCasado" no objeto usuario, a mesma seria criada/adicionada ao objeto


• Para realizarmos isso com uma propriedade inexistente mas que queremos que tenha mais de uma palavra, basta :

	usuario["possui investimento"] = true

  ************************************************************************
  *                                                                      *
  *  Sintaxe / Estrutura :  Alterando valor de propriedade em um objeto  *
  *                                                                      * 
  *                                                                      *
  ************************************************************************

• Para alterarmos um valor de uma propriedade já existente, basta digitarmos : nomeDoObjeto.propriedade = novoValorPropriedade

	usuario.idade = 30 // mudaria o valor da propriedade idade do objeto usuario de 29 para 30.


• Para alterarmos um valor de uma propriedade já existente com mais de uma palavra, basta :
	
	usuario["sobrenome e apelido"] = "Joaozinho"	


  ************************************************************************
  *                                                                      *
  *  Sintaxe / Estrutura :  Deletando uma propriedade de um objeto       *
  *                                                                      * 
  *                                                                      *
  ************************************************************************

• Para deletarmos uma propriedade basta usarmos "delete objeto.propriedade"

	delete usuario.falar


• Para deletarmos uma propriedade que tenha múltiplas palavras , basta :

     	delete usuario["sobrenome e apelido"]



  *****************************************************************************
  *                                                                           *
  *  Sintaxe / Estrutura :  Criação de um Objeto - A partir de outro objeto   *
  *                                                                           * 
  *                                                                           *
  *****************************************************************************

• Vamos supor que já temos um objeto . Podemos criar um objeto a partir desse objeto existente com o método .create()


	const objetoPessoa = {
	eHumano : true,
	dizOi : function () {
		console.log(`Meu nome é ${this.nome}.`}
			    }
	}

	const eu = Object.create(objetoPessoa)
	
	eu.nome = "João"
	
	me.dizOi() // Meu nome é João


  *****************************************************************************
  *                                                                           *
  *  Sintaxe / Estrutura :  Criação de um Objeto - Maneira Dinâmica           *
  *                                                                           * 
  *                                                                           *
  *****************************************************************************

• Nós podemos criar um objeto de maneira dinâmica, ou seja : 
  Uma variável definida no escopo raíz ser usada como propriedade do objeto.


  const nome = "João Victor"

  const usuario = {	
	[nome] : "29 anos"
	}

  console.log(usuario) // { João Victor : "29 anos" }



• Além disso, caso o valor da propriedade seja o mesmo do valor, basta colocarmos a variável responsável na criação do objeto:


	const usuario1 = "João"

	const usuario2 = "Roberta"


	const usuarios = {	
			a,
			b
			}

	console.log(usuarios) // { usuario1 : "João" , usuario2 : "Roberta" }


  ************************************************************************
  *                                                                      *
  *  Sintaxe / Estrutura :  Criação de um Objeto - Propriedade Simples   *
  *                                                                      * 
  *                                                                      *
  ************************************************************************

• Por propriedade simples consideramos uma propriedade com nome único, sem espaços.

• Podemos criar um objeto de duas formas. 

• A primeira é conhecida como object literal. 

	  let objeto = {
	  propriedade1 : valorPropriedade1,
	  propriedade2 : valorPropriedade2
	  }	

• A segunda é chamada de construtor do objeto

	  let objeto = new Object()


  ***************************************************************************
  *                                                                         *
  *  Sintaxe / Estrutura :  Criação de um Objeto - Propriedade Não simples  *
  *                                                                         * 
  *                                                                         *
  ***************************************************************************

• Podemos utilizar uma propriedade com mais de um nome, a mesma deve estar entre ""
   
     let objeto = {
	  "propriedade 1" : valorPropriedade1,
	  "propriedade 2" : valorPropriedade2
	  }	
	


  *************************************************************************************************
  *                                                                         			  *
  *        Sintaxe / Estrutura :  Testando existência de propriedade  - propriedade in objeto     *
  *                                                                         			  * 
  *                                                                         			  *
  *************************************************************************************************

• Podemos testar a existência de uma propriedade tentando acessá-la. Caso a mesma não exista , retornará undefined

	let user = {}
	console.log(user["age"]) // Retorna undefined



• Podemos também utilizar uma propriedade "especial" chamada "in" . "propriedade" in nomeDoObjeto

	"age" in user // Retorna false



• No caso de utilizarmos a sintaxe com "in" , é importante passarmos o nome da propriedade com "" uma vez que
    se não passarmos estaremos comparando o VALOR daquela variável como se a mesma fosse uma propriedade.

	
	let user = { age: 30 };

	let key = "age";
	console.log( key in user ); // true, a propriedade "age" existe no objeto.




	  *******************************************************************************************************
	  *                                                                        	                        *
	  *  Sintaxe / Estrutura :  Criando um objeto a partir de um Map - Object.fromEntries()          	*
	  *                                         				   	                        *
	  *                                                                        				*
	  *******************************************************************************************************


• Podemos transformar um Map em um objeto simples
 Para isso basta utilizarmos o método Object.fromEntries(map) passando o map como argumento e o mesmo criará um
 objeto "simples" (não aninhado) a partir do mesmo.
 O exemplo a seguir explica melhor :

	let prices = Object.fromEntries(
					[
		  				['banana', 1],
  						['orange', 2],
  						['meat', 4]
					]	
					)

	ou

	let mapExemplo = new Map()
	mapExemplo.set('banana',1)
	mapExemplo.set('laranja',2)
	mapExemplo.set(true,true)

	let objetoDeMap = Object.fromEntries(mapExemplo.entries());

	console.log(objetoDeMap) // {banana : 1 , laranja : 2 , true : true}


	ou

	let mapExemplo = new Map()
	mapExemplo.set('banana',1)
	mapExemplo.set('laranja',2)
	mapExemplo.set(true,true)

	let objetoDeMap = Object.fromEntries(mapExemplo);

       	console.log(objetoDeMap) // {banana : 1 , laranja : 2 , true : true}


• A chamada do método .entries() no exemplo 2 retorna um iterável the pares chave:valor no exato formato esperado
  para Object.fromEntries().

• Podemos omitir o .entries() pois Object.fromEntries() espera um objeto iterável como argumento. 
  Não necessariamente um array. E o padrão de iteração para um map retorna o mesmo par de chave:valor que .entries() 
  Por conta disso nós "pegamos" um objeto com as mesmas chave:valor que o map passado.

• Lembrando que como um objeto só aceita propriedades no formato de String, automaticamente as propriedades
  do mapa que não forem String serão convertidos automaticamente e passarão a ser String.



	  ***********************************************************************************************************************************************
	  *                                                                        			                                                *
	  *  Sintaxe / Estrutura :  Clonando/Mergeando um objeto a partir de outro Objeto - Laço for..in , Object.assign() , Spread Operator       	*
	  *                                         				   			                                                *
	  *                                                                        			                                                *
	  ***********************************************************************************************************************************************


• Temos várias formas de fazermos isso . Podemos clonar através de um laço for in , por exemplo :

	let usuario = { 
		nome : "João",
		idade: 29
		}

	let clone = {}

	for (let propriedade in usuario) {
	clone[propriedade] = usuario[propriedade]
	}

	console.log(clone)

	clone.name = "Pedro"

	console.log(usuario.nome)

• Para isso temos o método Object.assign() que recebe como primeiro argumento um objeto vazio {} e como segundo argumento
  o objeto que queremos clonar para a variável. É importante entendermos que a cópia é criada somente no primeiro nível
  do objeto. É chamada de "shallow copy" . Ou seja, referencia o endereço de memória em que o objeto foi criado. 

• Podemos utilizar o Object.assign passando múltiplos parâmetros também 

• Se o nome da propriedade copiada já existir, será substituida
  Dessa forma :

	let obj1 = {
			a : 'a' ,
			b: 'b' ,
			 c: 'c'
                   }

	let cloneObj1 = Object.assign( {} , obj1 )


	let usuario = { nome : "João" }
	let permissoes = { podeEditar : true }
	let permissoes 2 = { podeLogar : true }

	Object.assign(usuario, permissoes, permissoes2)

	console.log(usuario) // { nome : "João" , podeEditar : true , podeLogar : true }

	


• Podemos fazer essa cópia utilizando o spread operator também (para dúvidas verificar no arquivo Spread Operator.txt) :

	
	let cloneObj1 = {...obj1}




• Para copiarmos "todos os níveis de um objeto" podemos utilizar o método structuredClone(objeto) . Ele 
  copia um objeto com todas as propriedades aninhadas, de forma que caso alteremos uma , não afete a outra.
  Funções não são suportadas caso estejam aninhadas em um objeto.
  Para isso precisaríamos utilizar uma biblioteca do javascript chamada Lloadh que possui o método _.cloneDeep(objeto)



	let user = {
 		 name: "John",
  		 sizes: {
   			 height: 182,
   			 width: 50
  		       }
		   };


	let clone = structuredClone(user)

	console.log(user.sizes === clone.sizes) // false , são objetos diferentes




	  *******************************************************************************
	  *                                                                        	*
	  *  Sintaxe / Estrutura :  Performando um laço em um objeto  - for ...in     	*
	  *                                         				   	*
	  *                                                                        	*
	  *******************************************************************************

• O laço for..in ignora propriedades que usam Symbol() como valor. 
  Para retornarmos qualquer tipo de chave, precisamos usar o Reflect.ownKeys(obj)

• Para podermos "andar" sobre todas as propriedades de um objeto temos um laço especial : for in

• Através desse laço podemos também imprimir os valores das propriedades do objeto :

	for (let propriedade in nomeDoObjeto) {
  	
	}
	

	let usuario = {
 	 nome: "Joao",
  	idade: 30,
	};

	for(let propriedade in usuario) {
		console.log(propriedade) // nome,idade
		console.log(usuario[propriedade]) // Joao, 30
	}


	  *******************************************************************************
	  *                                                                        	*
	  *  Sintaxe / Estrutura :  Ordem dos itens de um objeto quando performamos     *
	  *                         um laço                				*
	  *                                                                        	*
	  *******************************************************************************

• Quando "loopamos" por um ojbeto, existe uma ordem em que os itens serão "retornados" para nós.
  Sendo essa :

	Números inteiros são enumerados do menor para maior
	As outras propriedades aparecem na ordem de criação


• Para fazer com que as propriedades no formato de números inteiros sigam a ordem que estão no objeto, basta colocarmos um "+" na 
  frente do mesmo.

	
	let codes = {
  	"+49": "Germany",
 	 "+41": "Switzerland",
  	"+44": "Great Britain",
	};
	


	  ***********************************************************************************************
	  *                                                                        	                *
	  *  Sintaxe / Estrutura :  Retornando um array das propriedades de um objeto - Object.keys()   *
	  *                                                   				                *
	  *                                                                        	                *
	  ***********************************************************************************************

• Assim como o laço for..in , esse método ignora propriedades que usam Symbol() como valor. 
  Para retornarmos qualquer tipo de chave, precisamos usar o Reflect.ownKeys(obj)

• Basta utilizarmos o método Object.keys(objeto)

	let usuario = {
		nome: "João",
		idade: 29
		}

	Object.keys(usuario) // ["nome", "idade"]


	  **********************************************************************************************
	  *                                                                        		       *
	  *  Sintaxe / Estrutura :  Retornando um array com os valores de um objeto - Object.values()  *
	  *                                                   				               *
	  *                                                                        	               *
	  **********************************************************************************************

• Assim como o laço for..in , esse método ignora propriedades que usam Symbol() como valor. 
  Para retornarmos qualquer tipo de chave, precisamos usar o Reflect.ownKeys(obj)

• Basta utilizarmos o método Object.values(objeto)
	

	let usuario = {
		nome: "João",
		idade: 29
		}

	Object.values(usuario) // ["João", 29]


	  *******************************************************************************
	  *                                                                        	*
	  *  Sintaxe / Estrutura :  Retornando um array com os pares propriedade/valor  *
	  *			    de um objeto  - Object.entries()			*
	  *                                                   				*
	  *                                                                        	*
	  *******************************************************************************

• Assim como o laço for..in , esse método ignora propriedades que usam Symbol() como valor. 
  Para retornarmos qualquer tipo de chave, precisamos usar o Reflect.ownKeys(obj)

• Basta utilizarmos o método Object.entries(objeto)



	let usuario = {
		nome: "João",
		idade: 29
		}

	Object.entries(usuario) // [ ["nome", "João"] ,["idade", 30] ]




	  ***********************************************************************************************
	  *                                                   						*
	  *     Sintaxe / Estrutura :  Transformando Objetos - Object.entries() e Object.fromEntries()	*
	  *                                                   						*
	  *                                                  						*
	  ***********************************************************************************************

• Já que os métodos para array não existem para objetos, o que podemos fazer é :

	1 - Transformar o objeto em um array com pares de propriedade/valor
	2 - Utilizar métodos de array nesse array
	3 - Transformar o array em objeto novamente

• Para fazermos o passo número 1, utilizaremos o método Object.entries()
• Para o passo número 2 podemos utilizar os métodos disponíveis para arrays
• Para transformarmos o array em um objeto basta utilizarmos o Object.fromEntries() 



	let precos = {
 	 banana: 1,
 	 laranja: 2,
 	 carne: 3,
	 maca : 4,
         abacate: 5,
         frango : 6,
         alface: 7,
         pepino : 8,
         limao : 9,
         abobrinha: 10
	};
	let dobroPreco = Object.fromEntries(
  	Object.entries(precos).map(valor => [valor[0], valor[1] * 2])
	);

	console.log(dobroPreco.carne); // 6
	console.log(dobroPreco)


• valor corresponde ao par propriedade/valor (banana,1) (laranja,2) etc
• valor[0] corresponde a propriedade
• valor[1] corresponde ao valor