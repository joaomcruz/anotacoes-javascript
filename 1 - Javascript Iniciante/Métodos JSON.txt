			*********************************************************************
			*                                                                   *
			*   Convertendo objetos javascript para JSON - JSON.stringify()     *
			*                                                        	    *
			*                                                                   *
			*********************************************************************

• Podemos converter um objeto javascript para um JSON através do método JSON.stringify()

• Nesse método, passamos o objeto que queremos converter para JSON como argumento .

• Esse método pega um objeto e o converte para string no formato JSON.

• Pode ser aplicado a tipos primitivos também

• Um JSON suporta os seguintes tipos : Objetos, arrays/listas, strings,números,booleans e null.

• Pelo fato de JSON ser apenas dados independente de linguagem especificada, algumas propriedades de um objeto
 javascript serão "puladas" com esse método. Sendo eles : Funções, propriedades e valor Symbol, propriedades
 que armazenem undefined.

• Objetos aninhados são suportados e convertidos automaticamente

• Uma limitação importante é que não devem ocorrer referências "circulares" . Ou seja, uma propriedade de um objeto ter
  o valor atribuído a partir de um outro objeto e vice versa. Nesse caso teríamos uma falha.


• Tem como sintaxe : JSON.stringify(objeto[,replacer, espaço) onde : 
  No lugar do replacer podemos passar um array de propriedades para fazer o encoding OU uma função de mapeamento 
  (function (chave,valor) {} ) . Em espaço podemos definir a quantidade de espaço que será utilizada na formatação.

• Na maioria das vezes, é utilizado somente com o primeiro argumento, mas se precisarmos melhorar o processo de mudança, 
  como filtrar referências circulares podemos usar o segundo argumento.

• Caso passemos um array de propriedades, apenas essas propriedades serão convertidas.

• No caso de passarmos uma propriedade que é um objeto, precisamos passar também as propriedades desse objeto interno,
  caso contrário as mesmas não serão convertidas


• A função replacer é chamada para cada par de propriedade/valor e deve retornar o valor "substituído"
  que será utilizado ao invés do original. Ou undefined caso o valor tenha que ser "pulado". O primeiro
  valor tem sempre uma propriedade/chave vazia, e o valor é o objeto que está sendo passado para conversão

• O terceiro argumento, espaço , é utilizado para deixar a formatação "mais bonita". Antigamente,
  os objetos que eram transformados em strings não tinham identação ou espaços extras. 
  Esse argumento pode aceitar um inteiro ou uma string, no caso de número, é utilizado para dar espaçamento
  enquanto a string é utilizada para identação.
  O único propósito do espaço é para deixar o output mais bonito/organizado.


• Assim como o método toString para conversão de string, um objeto também pode prover um método toJSON para
 uma conversão para JSON. Esse método JSON.stringify chama o método toJSON automaticamente se disponível.



			*********************************************************************
			*                                                                   *
			*   Convertendo JSON para objetos javascript - JSON.parse()         *
			*                                                        	    *
			*                                                                   *
			*********************************************************************

• Esse método serve para transformar um JSON para objeto javascript

• Pode receber até dois argumentos, sendo o primeiro a "string" (JSON) e segundo uma função reviver que é opcional.
  Essa função será chamada para cada par de propriedade/valor e pode transformar o valor.

• Essa função é muito útil quando por exemplo tivermos nessa "string" (JSON) uma data. Dessa forma, conseguimos
  transformar o valor dessa propriedade em um Date , e não simplesmente uma string .

• Tem como sintaxe : JSON.parse(