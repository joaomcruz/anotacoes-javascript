			*********************************************************************
			*                                                                   *
			*   Convertendo objetos javascript para JSON - JSON.stringify()     *
			*                                                        	    *
			*                                                                   *
			*********************************************************************

• Podemos converter um objeto javascript para um JSON através do método JSON.stringify()

• Nesse método, passamos o objeto que queremos converter para JSON como argumento .

• Esse método pega um objeto e o converte para string no formato JSON.

• Pode ser aplicado a tipos primitivos também

• Um JSON suporta os seguintes tipos : Objetos, arrays/listas, strings,números,booleans e null.

• Pelo fato de JSON ser apenas dados independente de linguagem especificada, algumas propriedades de um objeto
 javascript serão "puladas" com esse método. Sendo eles : Funções, propriedades e valor Symbol, propriedades
 que armazenem undefined.

• Objetos aninhados são suportados e convertidos automaticamente

• Uma limitação importante é que não devem ocorrer referências "circulares" . Ou seja, uma propriedade de um objeto ter
  o valor atribuído a partir de um outro objeto e vice versa. Nesse caso teríamos uma falha.


• Tem como sintaxe : JSON.stringify(objeto[,replacer, espaço) onde : 
  No lugar do replacer podemos passar um array de propriedades para fazer o encoding OU uma função de mapeamento 
  (function (chave,valor) {} ) . Em espaço podemos definir a quantidade de espaço que será utilizada na formatação.

• Na maioria das vezes, é utilizado somente com o primeiro argumento, mas se precisarmos melhorar o processo de mudança, 
  como filtrar referências circulares podemos usar o segundo argumento.

• Caso passemos um array de propriedades, apenas essas propriedades serão convertidas.

• No caso de passarmos uma propriedade que é um objeto, precisamos passar também as propriedades desse objeto interno,
  caso contrário as mesmas não serão convertidas


• A função replacer é chamada para cada par de propriedade/valor e deve retornar o valor "substituído"
  que será utilizado ao invés do original. Ou undefined caso o valor tenha que ser "pulado". O primeiro
  valor tem sempre uma propriedade/chave vazia, e o valor é o objeto que está sendo passado para conversão

• O terceiro argumento, espaço , é utilizado para deixar a formatação "mais bonita". Antigamente,
  os objetos que eram transformados em strings não tinham identação ou espaços extras. 
  Esse argumento pode aceitar um inteiro ou uma string, no caso de número, é utilizado para dar espaçamento
  enquanto a string é utilizada para identação.
  O único propósito do espaço é para deixar o output mais bonito/organizado.


• Assim como o método toString para conversão de string, um objeto também pode prover um método toJSON para
 uma conversão para JSON. Esse método JSON.stringify chama o método toJSON automaticamente se disponível.



			let student = {
 					 name: 'John',
  					 age: 30,
  					 isAdmin: false,
  					 courses: ['html', 'css', 'js'],
  					 spouse: null
				      };


  			let json = JSON.stringify(student);

  			alert(typeof json); // temos uma string

  			alert(json); //
  	
			RESULTADO :

			{
  		        	"name": "John",
  		        	"age": 30,
  		        	"isAdmin": false,
  		        	"courses": ["html", "css", "js"],
  		        	"spouse": null
  		        }


			alert( JSON.stringify(1) ) // 1 , o número em JSON é só um número


			alert( JSON.stringify('test') ) // "test" , uma string em JSON ainda é uma string, mas com aspas duplas

			alert( JSON.stringify(true) ); // true

			alert( JSON.stringify([1, 2, 3]) ); // [1,2,3]



			let user = {
					  sayHi() { // ignorado
					  alert("Hello");
				   },
		    
                       [Symbol("id")]: 123, // ignorado
                       something: undefined // ignorado
			};

			alert( JSON.stringify(user) ); // {} (objeto vazio)


			let meetup = {
  					title: "Conference",
  					room: {
   						 number: 23,
    						participants: ["john", "ann"]
  					      }
				     };

			alert( JSON.stringify(meetup) );

			Toda a estrutura será transformada em string : 
			
			{
			  "title":"Conference",
			  "room":{"number":23,"participants":["john","ann"]},
			}



			Importante Limitação de referências "circulares" :

			

			let room = {
  					number: 23
				   };

			let meetup = {
  					title: "Conference",
  					participants: ["john", "ann"]
				     };

			meetup.place = room;       // meetup referencia room
			
			room.occupiedBy = meetup; // room referencia meetup

			JSON.stringify(meetup); // Erro:  Convertendo estrutura circular para JSON


		
			Utilizando o replacer :

			let room = {
 					 number: 23
				   };


			let meetup = {
 					 title: "Conference",
  					 participants: [{name: "John"}, {name: "Alice"}],
  					 place: room // meetup referencia room
				     };

			room.occupiedBy = meetup; // room referencia meetup

			alert( JSON.stringify(meetup, ['title', 'participants']) ); 
                        // {"title":"Conference","participants":[{},{}]} O objeto "participants" fica vazio
                          porquê especificamos somente esse objeto e não as propriedades name dentro dele.


                                                                                    
			let room = {
 					 number: 23
				   };


			let meetup = {
 					 title: "Conference",
  					 participants: [{name: "John"}, {name: "Alice"}],
  					 place: room // meetup referencia room
				     };

			room.occupiedBy = meetup; // room referencia meetup			
			
			alert( JSON.stringify(meetup, ['title', 'participants', 'place', 'name', 'number']) ); //
                   

                        RESULTADO :

			{
 			  "title":"Conference",
  			  "participants":[{"name":"John"},{"name":"Alice"}],
  			  "place":{"number":23}
			}

			Nesse caso tudo está serializado com exceção de "occupiedBy". Mas as lista de propriedades
                        é muito longa. Ao invés disso podemos utilizar uma função como replacer ao invés de um array.
			


			let room = {
 					 number: 23
				   };


			let meetup = {
 					 title: "Conference",
  					 participants: [{name: "John"}, {name: "Alice"}],
  					 place: room // meetup referencia room
				     };

			room.occupiedBy = meetup; // room referencia meetup	


			alert( JSON.stringify(meetup, function replacer(key, value) {
  			alert(`${key}: ${value}`);
  			return (key == 'occupiedBy') ? undefined : value;
			}));

		
			RESULTADO :

			:             [object Object]
			title:        Conference
			participants: [object Object],[object Object]
			0:            [object Object]
			name:         John
			1:            [object Object]
			name:         Alice
			place:        [object Object]
			number:       23
			occupiedBy: [object Object]


			
			
			Formatando utilizando o argumento "espaçamento" :

			
			let user = {
					  name: "John",
					  age: 25,
					  roles: {
					  		isAdmin: false,
		                                        isEditor: true
						  }
				   };


			alert(JSON.stringify(user, null, 2));

			RESULTADO :

			{
 				 "name": "John",
 				 "age": 25,
 				 "roles": {
 				             "isAdmin": false,
 				             "isEditor": true
					  }
			}





			toJSON customizado :


			let room = {
  					number: 23
				   };

			let meetup = {
  					title: "Conference",
  					date: new Date(Date.UTC(2017, 0, 1)),
  					room
				    };

			alert( JSON.stringify(meetup) );


			RESULTADO :

  			{
  			  "title":"Conference",
   			   "date":"2017-01-01T00:00:00.000Z",  // (1)
  			   "room": {"number":23}               // (2)
 			 }




			let room = {
  			number: 23,
 		        toJSON() {
					 return this.number;
				 }
				};

			let meetup = {
					  title: "Conference",
					  room
				     };

			alert( JSON.stringify(room) ); // 23

			alert( JSON.stringify(meetup) );

			RESULTADO :

 			 {
  				  "title":"Conference",
   				 "room": 23
  			 }



			*********************************************************************
			*                                                                   *
			*   Convertendo JSON para objetos javascript - JSON.parse()         *
			*                                                        	    *
			*                                                                   *
			*********************************************************************

• Esse método serve para transformar um JSON para objeto javascript

• Pode receber até dois argumentos, sendo o primeiro a "string" (JSON) e segundo uma função reviver que é opcional.
  Essa função será chamada para cada par de propriedade/valor e pode transformar o valor.

• Essa função é muito útil quando por exemplo tivermos nessa "string" (JSON) uma data. Dessa forma, conseguimos
  transformar o valor dessa propriedade em um Date , e não simplesmente uma string .

• Tem como sintaxe : JSON.parse(JSON, function reviver(chave,valor) {} )