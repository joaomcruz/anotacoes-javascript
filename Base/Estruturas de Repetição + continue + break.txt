• Em javascript possuímos 3 estruturas básicas de repetição/loop/laço :
  - for -> Provavelmente o mais utilizado. Utilizamos quando já possuímos conhecimento de quantas vezes queremos repetir o bloco de código.
  - while -> Quando apenas sabemos a condição de continuarmos repetindo o bloco de código.
  - do while -> Quando apenas sabemos a condição de continuarmos repetindo o bloco de código.
  - Podemos utilizar as palavras chave "continue" e "break" nas estruturas de repetição



## for loops :

  • No laço for, nós definimos na mesma linha o início do contador de repetição,
  a pausa na repetição, e o incremento desse contador de repetição.

  Estrutura / Sintaxe :

    for(variavel de inicio do loop ; condição de parada do loop ; incremento) {
      //bloco de código
    }


  Exemplo :

    listaDeAnimais = ["Macaco","Cachorro","Gato","Coruja","Pato"]
    for(let i = 0 ; i < listaDeAnimais.length ; i++) {
      console.log(listaDeAnimais[i])
    }



    - O código acima começa no index 0 do array listaDeAnimais e tem como condição de parada
      quando chegar o index for 1 anterior ao tamanho desse array ,já que a condição de incremento
      tá sendo de 1 em 1 .
    - Dessa forma, ele vai imprimir na tela todos os itens do array, uma vez que tá sendo passado
      através do console.log a lista de animais no index i. Ou seja, irá imprimir o index 0,1,2 e 3 do array.

    ps : Caso não entenda o .length nem o "listaDeAnimais" , consultar "Array ou Listas.txt" 



================================================================================================================================================================


## while :

  • No laço while, é no bloco do código que mexemos no incremento para que 
  a condição de parada seja atingida e o laço não fique rodando para sempre
  até estourar a memória.


   Estrutura / Sintaxe :

    while(condição) {
    //bloco de código
    }


   Exemplo :

    let contador = 0
    while(contador < 10) {
    console.log(contador)
    contador++
    }


================================================================================================================================================================


## do while :

  • Provavelmente o laço menos utilizado , pois primeiro executa
  um bloco de código para depois verificar a condição de parada.
  • Igual o while, é dentro do bloco de código que também
  alteramos o contador que irá afetar na condição de parada


   Estrutura / Sintaxe :

    do {
      //bloco de código
    } while(condição)


   Exemplo :

    let contador2 = 10
    do {
      console.log(contador2)
      contador2--
    }
    while(contador > 0) 


================================================================================================================================================================


## continue

  • A palavra chave continue termina a atual iteração do laço em que ele se encontra 
  ou de um laço rotulado, e continua a execução deste laço com a próxima iteração.
  • Diferentemente do break, o continue não termina a execução do laço completamente, em vez disso ele:
  -  Volta à condição, em um laço do tipo while.
  -  Volta à expressão, atualizando-a, em um laço do tipo for.
  • O continue pode incluir, opcionalmente, um rótulo que premite ao programa pular 
  para a próxima iteração de um laço rotulado em vez de pular o loop em que ele se encontra.
  Neste caso, o continue necessita estar dentro deste laço rotulado.



  Exemplo - Usando continue com for loop :

  let text = "";
  for (let i = 0; i < 5; i++) {
  if (i === 3) {
  continue;
  }
  text += i + "<br>";
  }

  • Quando i = 3 , o código volta para a primeira linha (para o for loop)


  **********************************************************


  Exemplo - Usando continue com while :

  var i = 0;
  var n = 0;

  while (i < 5) {
    i++;
  if (i === 3) {
    continue;
  }
  n += i;
  }

  • O exemplo acima mostra um laço while que
  tem um continue que será executado quando 
  o valor de i for 3. Quando i = 3 , o código volta
  para a primeira linha (while (1 < 5) ).
  Assim, n terá os valores 1, 3, 7, e 12.

  **********************************************************


  Exemplo - Usando o continue com um rótulo :

  var i = 0;
  var j = 8;
  checkiandj: while (i < 4) {
    console.log("i: " + i);
    i += 1;
  checkj: while (j > 4) {
    console.log("j: " + j);
    j -= 1;
    if (j % 2 == 0) continue checkj;
    console.log(j + " is odd.");
  }
  console.log("i = " + i);
  console.log("j = " + j);
  }


  • No exemplo acima um laço rotulado como checkiandj contém 
  o laço rotulado checkj. Se o continue for alcançado, o programa
  continua a execução voltando ao topo do rótulo checkj. 
  Cada vez que o continue for alcançado, checkj reiterará 
  até sua condição for falsa. Quando retornar false, 
  o restante de checkiandj será executado.
  Se o continue tivesse o rótulo checkiandj, o programa 
  iria continuar retornando a execução ao label checkiandj.

  • O output do código acima será : 
  "i: 0";
  // start checkj
  "j: 8";
  "7 is odd.";
  "j: 7";
  "j: 6";
  "5 is odd.";
  "j: 5";
  // end checkj
  
  "i = 1";
  "j = 4";
  
  "i: 1";
  "i = 2";
  "j = 4";
  
  "i: 2";
  "i = 3";
  "j = 4";
  
  "i: 3";
  "i = 4";
  "j = 4";
  

================================================================================================================================================================

## break

  • O comando break encerra o loop atual,
  switch (como explicado no controle de fluxo.txt),
  ou o loop que foi informado no label e transfere
  o controle da execução do programa para o comando
  seguinte

  Exemplo - Usando o break com while :

  function testaBreak(x) {
  var i = 0;
  while (i < 6) {
    if (i == 3) {
      break;
    }
    i += 1;
    }
  return i * x;
  }

  • A função acima possui um comando break
  que encerra o loop while quando a variável
  i vale 3, e então retorna o valor 3 * x.

