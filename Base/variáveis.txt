# Variáveis 

  • Sempre utilizar camelCase pela convenção
  • Podemos começar uma variável com caracteres especiais/underscore/números ou letras
  • Em Javascript temos duas formas de declarar variáveis : let e const
    - let é utilizado para variáveis que podem ter o valor alterável
    - const é utilizado para variáveis que possurem um valor constante
  • Se uma variável let estiver dentro de um {} um escopo é criado (consultar escopo.txt caso surja alguma dúvida)
  • Antigamente ao invés de let/const utilizava-se "var" , porém após a criação de let/const, var não é mais utilizado.
  • O código do exemplo 2 é mais avançado. Para melhor entender o bloco "if" visite o arquivo controle de fluxo.txt
  • Variáves criadas com "let" só são disponíveis dentro do bloco em que são criadas ( e ela "cria" um bloco ). 
  • Declarações com var tem escopo global ou escopo de função/local. O escopo é global quando uma variável var é declarada fora de uma função. Isso significa que qualquer variável que seja declarada com var fora de um bloco de função pode ser utilizada na janela inteira. Criando inconsistência caso a mesma variável fosse criada dentro de um bloco de código, onde dessa forma a mesma era alterada.
  • var tem escopo de função quando é declarado dentro de uma função. Isso significa que ele está disponível e pode ser acessado somente de dentro daquela função
  • Variáveis criadas com let não podem ser redeclaradas no mesmo escopo e tem que ser declaradas antes do uso, diferente de "var" .
  • Toda variável em javascript sofre Hoisting , que significa que toda variável é “elevada/içada” (hoisting) até o topo do seu contexto de execução. 
  Esse mecanismo move as variáveis para o topo do seu escopo antes da execução do código. É por esse mesmo motivo que “é possível usar uma variável antes dela ter sido declarada”: em tempo de execução a variável será elevada (hoisting) e tudo funcionará corretamente.
  • Variáveis não inicializadas (var) possuem valor undefined e por isso quando sofrem hoisting não lançam um erro.
  • Variáveis não inicializadas com let não possuem valor e por isso dão erro caso sejam acessadas sem serem inicializadas.
  • Uma variável declarada com let em um bloco estará disponível apenas dentro daquele bloco.
  


  Exemplo 1 :

    let $variavel1 = valor1
    let _variavel2 = valor2
    const $variavel3 = valor3


  Exemplo 2 :

  let experiencia = 100
  let wizardLevel = false
  if(experiencia > 90) {
  let wizardLevel = true
  }

  • Caso usássemos um console.log para imprimir o valor de wizardLevel , o output seria ainda sim "false".
  Se a palavra utilizada para definir o wizardLevel fosse "var" ao invés de "let" , a expressão condicional (if)
  sobrescreveria o valor da mesma. Como aqui a palavra utilizada foi "let", um novo escopo foi criado e a variável
  wizardLevel fora da estrutura condicional permanece intacta. Contudo, se ao invés de utilizar a expressão 
  "let wizardLevel = true" utilizarmos "wizardLevel = true" , o valor da variável será de fato alterado, pois
  a mesma se encontra no escopo raíz/global e será diretamente acessada.
  
