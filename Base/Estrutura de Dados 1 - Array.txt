
		********************************
		*                              *
		*     Arrays ou Listas         *
		*                              *
		********************************


• Lista é a "tradução" de array
• É uma estrutura de dados, não é um tipo de valor
• É uma forma de organizar dados de forma ordenada
• A lista em javascript NÃO precisa conter dados do mesmo tipo,embora seja EXTREMAMENTE recomendável só conter dados do mesmo tipo.
• A posição de cada elemento se chama index
• Toda lista começa no index 0.
• O index final é o número de elementos - 1. Uma vez que começa em 0. 
• Para acessar um elemento específico da lista,basta digitar o nome da lista e passar a posição do elemento entre []




	******************************************************
	*                                                    *
        *         Lista/Array Exemplo                        *
        *                                                    *
        *    listaExemplo = ["Tigre", "Gato" , "Cachorro"]   *
        *                                                    *
        *                                                    *
        ******************************************************

• Essa lista possui length (tamanho) 3
• Sendo os index dela 0,1,2


	**********************************************
	*                                            *
        *         Acessando um item no array         *
        *                                            *
        **********************************************

• Basta passarmos o nome do array e o index que queremos acessar dentro de []

	console.log(listaExemplo[0]) // imprime "Tigre


	**********************************************
	*                                            *
        *         Adicionando um item no array       *
        *                                            *
        **********************************************

• Podemos fazer isso através de métodos ou manualmente. Métodos iremos ver mais pra frente. 
  Para adicionarmos de forma manual precisamos saber qual o tamanho do array (length). A partir daí,
  basta passarmos o próximo número da sequência do index e o seu valor. 

• listaExemplo possui length 3. No caso o último index atualmente é 2. O próximo é 3. Logo :

	listaExemplo[3] = "Macaco"


	**********************************************
	*                                            *
        *         Substituindo um item no array      *
        *                                            *
        **********************************************

• Basta passarmos o index e o valor que queremos que seja atribuído aquele index. Isso irá substituir o valor "atual"

	listaExemplo[1] = "Arara" // Irá substituir gato por Arara.


	**********************************************
	*                                            *
        *         Criando uma Lista/Array            *
        *                                            *
        **********************************************
       
• Podemos criar um array já com itens dentro :
	
	listaExemplo = ["Item1","Item2","Item3"]

• Podemos criar um array vazio de duas formas :

          - Forma 1 : listaExemplo = []
	  - Forma 2 : listaExemplo = new Array()


	****************************************************************
	*                                                              *
        *         Criando uma Lista/Array que contém listas            *
        *                                                              *
        ****************************************************************

• Podemos criar arrays que possuam array

	 listaExemplo2 = [
		["Tigre", "Gato" , "Cachorro"],
		["Pavão","Hipopótamo", "Macaco"],
		["Tucano","Arara","Gavião"]
		]	

	 listaExemplo2 = [
				[],
				[],
				[]
			]

• Essa lista possui length (tamanho) 3
• Sendo os index dela 0,1,2
• Por se tratar de uma lista com listas dentro, para acessarmos os elementos devemos 
  passar primeiramente o index de qual lista queremos acessar, depois passamos o elemento. 
  Por exemplo : listaExemplo2[0][0] acessa tigre. listaExemplo2[2][1] acessa arara.



	***********************************************************************************
	*                                                                                 *
        *        Pegando o último elemento de um array  de maneira otimizada              *
        *                                                                                 *
        ***********************************************************************************


• Basta utilizarmos o método .at e passarmos o "index" -1

	listaExemplo.at(-1) // Retorna cachorro.


• O método .at é igual a passarmos a posição do index do array. Sendo que quando passamos valores negativos ele vai se
	afastando do final do array.




	***********************************************************************************
	*                                                                                 *
        *        Métodos e Propriedades disponíveis para Listas / Arrays                  *
        *                                                                                 *
        ***********************************************************************************



 • Para utilizarmos uma propriedade/método usamos um ponto (.) e o nome da função/propriedade em sequência. Exemplo : listaExemplo.push("gavião")

 	- length -> Retorna o tamanho da lista
 	- push() -> Adiciona um item ao final do Array
 	- pop() -> Remove um item do final do Array (modifica o array original pois remove o item)
 	- shift() -> Remove do início do Array
  	- unshift() -> Adiciona ao início do Array
  	- indexOf() -> Procura o índice de um item no Array
  	- splice(indiceInicio, quantidadeDeItens) -> Altera um array a partir da posição do índice. "Remove" os itens do array original a partir da posição passada e de acordo com a quantidade expressa.
  	- toSpliced(indiceInicio, quantidadeDeItens) -> Mesmo do splice, porém retorna um novo array. Não muda o array original
 	- slice() > Retorna uma cópia de parte de um array a partir de um subarray criado entre as posições início e fim (fim não é incluído) de um array original. O Array original não é modificado
 	- sort() -> Retorna o array original em ordem ascendente por padrão.
 	- toSorted() -> Retorna um novo array em ordem ascendente.
 	- reverse() -> Reverte um array, ALTERA o array original.
  	- toReversed() -> Reverte um array como o reverse(), porém retorna um novo array. Não muda o array original.
  	- join() -> Cria e retorna uma nova string concatenando todos os elementos do array, separados por vírgula ou por um seletor específico passado dentro do método. 
	Se o array só tiver um item, o mesmo irá ser retornado SEM usar o separador.
	- concat() -> Cria uma cópia do array passado como argumento
  


